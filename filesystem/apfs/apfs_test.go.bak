// Copyright (c) 2019 Siemens AG
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Author(s): Jonas Plum

package apfs

import (
	"io"
	"log"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestAPFS(t *testing.T) {
	file, err := os.Open("../../testdata/evidence/filesystem/gpt_apfs.dd")
	defer file.Close()

	if err != nil {
		t.Fatal(err)
	}

	filesystem := io.NewSectionReader(file, 40*512, 39024*512)

	apfs := Apfs{}
	err = apfs.Decode(filesystem)
	if err != nil {
		t.Fatal(err)
	}

	p0 := apfs.Block0()
	body := p0.Body()
	containerSuperblock := body.(*ContainerSuperblock)
	// log.Printf("containerSuperblock: %#v", containerSuperblock)
	blocksize := containerSuperblock.BlockSize()
	assert.EqualValues(t, 4096, blocksize)

	assert.EqualValues(t, 0x949, containerSuperblock.OmapOid())
	filesystem.Seek(int64(containerSuperblock.OmapOid())*int64(blocksize), os.SEEK_SET)
	omap := Btree{}
	omap.DecodeAncestors(p0, &apfs)
	//log.Printf("omap: %#v", omap)

	/*
		filesystem.Seek(int64(*omap.TreeRoot())*int64(blocksize), os.SEEK_SET)
		omapnode := Node{}
		omapnode.DecodeAncestors(p0, &apfs)
	*/
	// log.Printf("omapnode: %#v", omapnode)
}

func BenchmarkAPFS(t *testing.B) {
	for n := 0; n < t.N; n++ {
		file, err := os.Open("../../testdata/evidence/filesystem/gpt_apfs.dd")

		if err != nil {
			t.Fatal(err)
		}

		filesystem := io.NewSectionReader(file, 40*512, 39024*512)

		apfs := Apfs{}
		err = apfs.Decode(filesystem)
		if err != nil {
			t.Fatal(err)
		}

		p0 := apfs.Block0()
		body := p0.Body()
		containerSuperblock := body.(*ContainerSuperblock)
		log.Printf("containerSuperblock: %#v", containerSuperblock)

		blocksize := containerSuperblock.BlockSize()
		assert.EqualValues(t, 4096, blocksize)

		assert.EqualValues(t, 0x949, containerSuperblock.OmapOid())
		filesystem.Seek(int64(containerSuperblock.OmapOid())*int64(blocksize), os.SEEK_SET)
		omap := Btree{}
		omap.DecodeAncestors(p0, &apfs)
		log.Printf("omap: %#v", omap)

		filesystem.Seek(int64(omap.TreeRoot())*int64(blocksize), os.SEEK_SET)
		omapnode := Node{}
		omapnode.DecodeAncestors(p0, &apfs)
		log.Printf("omapnode: %#v", omapnode)

		file.Close()
	}
}
