name: CI
on:
  push:
    branches: [ master ]
  pull_request:
  schedule:
    - cron:  '0 0 * * *'

jobs:

  legacy:
    name: legacy
    runs-on: windows-latest
    strategy:
      matrix:
        os: [windows]
        goversion: [go1.2.2, go1.9.7]
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: 1.14}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build
        run: |
          go mod download
          go mod vendor

          rm -rf path
          mkdir -p path/src/github.com/forensicanalysis/fslib go1.9.7 go1.2.2

          cp -r vendor/* path/src
          zip -r path.zip *
          unzip path.zip -d path/src/github.com/forensicanalysis/fslib
          rm path.zip

          export GOPATH=$GITHUB_WORKSPACE/path

          curl -Lso go1.9.7.windows-amd64.zip https://golang.org/dl/go1.9.7.windows-amd64.zip
          unzip -q go1.9.7.windows-amd64.zip
          mv go go1.9.7/root
          ./go1.9.7/root/bin/go version
          export GOROOT=$PWD/go1.9.7/root
          ./go1.9.7/root/bin/go build -v github.com/forensicanalysis/fslib/...

          curl -Lso go1.2.2.windows-amd64.zip https://golang.org/dl/go1.2.2.windows-amd64.zip
          unzip -q go1.2.2.windows-amd64.zip
          mv go go1.2.2/root
          ./go1.2.2/root/bin/go version
          export GOROOT=$PWD/go1.2.2/root
          ./go1.2.2/root/bin/go build -v github.com/forensicanalysis/fslib/... || true
        shell: bash

  fslib:
    name: fslib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: 1.14}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download dependencies
        run: go mod download

      - name: Install golangci-lint & go-acc
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.25.0
          go get -u github.com/ory/go-acc
        shell: bash

      - name: Lint
        run: golangci-lint run --verbose --config test/.golangci.yml
        if: matrix.os != 'windows-latest'
      - name: Lint Windows
        run: golangci-lint run --verbose --config test/.golangci.yml --disable gofmt --disable goimports
        if: matrix.os == 'windows-latest'
      - name: Test
        run: go-acc ./...
        shell: bash
      - name: Upload coverage
        env:
          CI: "true"
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)
        if: matrix.os == 'windows-latest'
        shell: bash

  fs:
    name: fs
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: '1.14'}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download dependencies
        run: go mod download

      - name: Setup node
        uses: actions/setup-node@v1
        with: {node-version: '10.x'}
      - name: Install bats
        run: npm install -g bats@1.1.0

      - name: Build
        run: |
          go build .
          go install .
          mkdir bin
          mv fs* bin
        working-directory: ./cmd/fs
        shell: bash
      - name: Bats test
        run: bats test/fs.bats
        shell: bash
      - name: Upload
        uses: actions/upload-artifact@master
        with:
          name: fs ${{ matrix.os }}
          path: cmd/fs/bin

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: '1.14'}
      - run: go get -u github.com/cugu/godoc2readme

      - name: Checkout code
        uses: actions/checkout@v2
      - run: godoc2readme --template docs/readme-template.md . > README2.md
      - run: diff Readme.md README2.md
